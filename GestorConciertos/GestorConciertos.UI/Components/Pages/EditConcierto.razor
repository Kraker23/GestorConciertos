@page "/concierto"
@page "/concierto/{Id}"

@using GestorConciertos.Shared
@using GestorConciertos.Services
@using GestorConciertos.Shared.DataApi
@inject IApiClient ApiClient;

@inject IConciertoData conciertoData;
@inject IConciertoCancionData conciertoCancionData;
@inject ICancionFavoritaData cancionData;

<label> @cargando</label>
<label> @error</label>

@if (concierto != null )
{
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem"  Style="border: var(--rz-grid-cell-border);">
        <RadzenFormField Text="Nombre" Variant="Variant.Outlined">
            <RadzenTextBox @bind-Value="@concierto.Nombre" />
        </RadzenFormField>
        <RadzenFormField Text="Lugar" Variant="Variant.Outlined">
            <RadzenTextBox @bind-Value="@concierto.Lugar" />
        </RadzenFormField>
        <RadzenFormField Text="Fecha" Variant="Variant.Outlined">
            <RadzenDatePicker @bind-Value=@concierto.Fecha HourFormat="12" DateFormat="dd/MM/yyyy" Name="DatePickerHourFormat" />
        </RadzenFormField>

        <div class="rz-p-12 rz-text-align-center">
            <RadzenCheckBox @bind-Value=@concierto.esEnsayo  />
            <RadzenLabel Text="Es Ensayo" Component="CheckBox1" class="rz-ms-2" />
        </div>

    </RadzenStack>

    <RadzenStack class="rz-p-0 rz-p-md-12">
        <RadzenCard class="rz-p-4" Variant="Variant.Outlined">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    Orientation
                    <RadzenDropDown @bind-Value="@orientation" TextProperty="Text" ValueProperty="Value" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "orientation" }})"
                                    Data="@(Enum.GetValues(typeof(Orientation)).Cast<Orientation>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    Buttons JustifyContent
                    <RadzenDropDown @bind-Value="@justifyContent" TextProperty="Text" ValueProperty="Value" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "buttons justify content" }})"
                                    Data="@(Enum.GetValues(typeof(JustifyContent)).Cast<JustifyContent>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    Buttons Style
                    <RadzenDropDown @bind-Value="@style" TextProperty="Text" ValueProperty="Value" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "buttons style" }})"
                                    Data="@(Enum.GetValues(typeof(ButtonStyle)).Cast<ButtonStyle>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    Buttons Variant
                    <RadzenDropDown @bind-Value="@variant" TextProperty="Text" ValueProperty="Value" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "buttons variant" }})"
                                    Data="@(Enum.GetValues(typeof(Variant)).Cast<Variant>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    Buttons Shade
                    <RadzenDropDown @bind-Value="@shade" TextProperty="Text" ValueProperty="Value" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "buttons shade" }})"
                                    Data="@(Enum.GetValues(typeof(Shade)).Cast<Shade>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    Buttons Size
                    <RadzenDropDown @bind-Value="@size" TextProperty="Text" ValueProperty="Value" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "buttons size" }})"
                                    Data="@(Enum.GetValues(typeof(ButtonSize)).Cast<ButtonSize>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    Buttons Gap
                    <RadzenTextBox @bind-Value="@gap" aria-label="gap" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    Allow filtering
                    <RadzenSwitch @bind-Value="@allowFilter" Style="margin-top: 4px;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "allow filtering" }})" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    Multiple selection
                    <RadzenSwitch @bind-Value="@multiple" Style="margin-top: 4px;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enable multiple selection" }})" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    Show header
                    <RadzenSwitch @bind-Value="@showHeader" Style="margin-top: 4px;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "show header" }})" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    Disabled
                    <RadzenSwitch @bind-Value="@disabled" Style="margin-top: 4px;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "disabled" }})" />
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
        <RadzenCard class="rz-p-4" Variant="Variant.Outlined">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                    Allow move all items
                    <RadzenSwitch @bind-Value="@allowMoveAll" Style="margin-top: 4px;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Allow move all items" }})" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px" Visible="@allowMoveAll">
                    Allow move all items from source to target
                    <RadzenSwitch @bind-Value="@allowMoveSourceToTarget" Style="margin-top: 4px;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Allow move all items" }})" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="4px" Visible="@allowMoveAll">
                    Allow move all items from target to source
                    <RadzenSwitch @bind-Value="@allowMoveTargetToSource" Style="margin-top: 4px;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Allow move all items" }})" />
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
        <RadzenCard>
            <RadzenPickList AllowMoveAll="@allowMoveAll" AllowMoveAllSourceToTarget="@allowMoveSourceToTarget" AllowMoveAllTargetToSource="@allowMoveTargetToSource" @bind-Source="@Source" @bind-Target="@Target"
                        Style="height:500px; width:100%;" Orientation="@orientation"
                            TextProperty="@nameof(Cancion.FullName)" AllowFiltering="@allowFilter" Multiple="@multiple" ShowHeader="@showHeader" Disabled="@disabled"
                            ButtonGap="@gap" ButtonJustifyContent="@justifyContent" ButtonStyle="@style" ButtonSize="@size" ButtonShade="@shade" ButtonVariant="@variant"
                            ItemRender="OnItemRender">
                <SourceHeader>
                    Canciones Favoritas:
                </SourceHeader>
                <TargetHeader>
                    Selected Cancion:
                </TargetHeader>
                <Template>
                    Canciones: @context.FullName
                </Template>
            </RadzenPickList>
        </RadzenCard>
    </RadzenStack>



} 



@code {
    [Parameter]
    public Guid? Id { get; set; }
    private string error { get; set; }
    private string cargando { get; set; }

    private Concierto concierto { get; set; }
    private List<ConciertoCancion> conciertoCancions { get; set; }
    private List<Cancion> canciones { get; set; }
    private List<Cancion> cancionesfavoritas { get; set; }
    protected override Task OnInitializedAsync()
    {
        cancionesfavoritas = cancionData.GetCancionesFavoritas();
        Source = cancionesfavoritas;
        if (Id.HasValue)
        {
            concierto = conciertoData.GetConcierto(Id.Value);
            conciertoCancions = conciertoCancionData.GetAllCancionesByIdConcierto(Id.Value);            
            foreach (ConciertoCancion cc in conciertoCancions)
            {
                canciones.Add(cancionesfavoritas.FirstOrDefault(x=>x.Id ==cc.IdCancion));
            }

        }
        else
        {
            concierto = new Concierto();

        }
        return base.OnInitializedAsync();
    }

    JustifyContent justifyContent = JustifyContent.Center;
    Variant variant = Variant.Outlined;
    ButtonStyle style = ButtonStyle.Secondary;
    Shade shade = Shade.Default;
    ButtonSize size = ButtonSize.Medium;
    Orientation orientation = Orientation.Horizontal;

    string gap = "12px";
    bool allowFilter = true;
    bool multiple = false;
    bool showHeader = true;
    bool disabled;
    bool allowMoveAll = true;
    bool allowMoveSourceToTarget = true;
    bool allowMoveTargetToSource = true;

    IEnumerable<Cancion> _source;
    IEnumerable<Cancion> Source
    {
        get
        {
            return _source;
        }
        set
        {
            if (_source != value)
            {
                _source = value;

                Console.WriteLine("Source updated");
            }
        }
    }


    IEnumerable<Cancion> _target;
    IEnumerable<Cancion> Target
    {
        get
        {
            return _target;
        }
        set
        {
            if (_target != value)
            {
                _target = value;

                Console.WriteLine("Target updated");
            }
        }
    }


    void OnItemRender(PickListItemRenderEventArgs<Cancion> args)
    {
        //args.Disabled = args.Item.CompanyName.Contains("a");
    }

    //crear gestionde al mover los elementos y guardar en la base de datos
    //guardar el concierto o actualizarlo
    //quitar los componentes sobrantes


}

