@using GestorConciertos.Shared;
@using GestorConciertos.Shared.DataApi
@inject ICancionFavoritaManager cancionFavoritaManager;
@inject IApiClient apiClient;
@inject NotificationService NotificationService

@using Microsoft.JSInterop
@using System.Text.Json
@inject DialogService DialogService
@inject IJSRuntime JSRuntime

<RadzenCard Variant="Variant.Filled" Style="max-width: 420px">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem">
        <RadzenImage Path="@cancionArtista?.artist.picture_medium" Style="width: 100px; height: 100px; border-radius: 50%;" />
        <RadzenStack Gap="0">
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Cancion</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@cancionArtista?.title</b></RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Cantante</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@cancionArtista?.artist?.name</b></RadzenText>
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" Gap="0">
        <audio controls="" name="media"> <source src="@cancionArtista.preview" type="audio/mpeg" preload="none"></audio>
        <RadzenButton Icon="lyrics" Click="BuscarLetra" />
        @if (!esFavorita)
        {
            <RadzenButton Icon="star" Click="AddFavorita" />
        }
        else
        {
            <RadzenButton Icon="star" Click="DeleteFavorita" IconColor="@Colors.Danger" />
        }
    </RadzenStack>
</RadzenCard>


@code {
    [Parameter]
    public CancionCantante cancionArtista { get; set; }

    private string letra { get; set; }
    //Colors colorFavorita { get; set; }
    bool esFavorita { get; set; }
    private Cancion cancionGuardada { get; set; } = null;

    protected override void OnInitialized()
    {
        //  colorFavorita = Colors.White;
    }

    public async void AddFavorita()
    {
        await BuscarLetra(false);
        if (!string.IsNullOrEmpty(letra))
        {
            cancionGuardada=cancionFavoritaManager.AddCancionFavorita(cancionArtista, letra);
            //colorFavorita = Colors.Yellow;
            NotificationMessage notifyMessage = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Añadida a Favoritas", Detail = "Cancion Añadida a Favoritas", Duration = 4000 };
            NotificationService.Notify(notifyMessage);
            esFavorita = true;
            StateHasChanged();
        }
        else
        {
            SinLetra();
        }
    }

    public async void DeleteFavorita()
    {
        if (cancionGuardada != null && cancionGuardada.Id !=null)
        {
            bool? result = await DialogService.Confirm("¿Estás seguro de que quieres eliminar la cancion del listado de Favoritas?", "Eliminar Cancion Favorita", new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" });
            if (result.HasValue && result.Value)
            {
                cancionFavoritaManager.RemoveCancionFavorita(cancionGuardada.Id);
                cancionGuardada = null;
                esFavorita = false; 
                NotificationMessage notifyMessage = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Eliminada la Cancion Favorita",
                        Duration = 4000
                    };
                NotificationService.Notify(notifyMessage);
                StateHasChanged();
            }
        }
    }

    public async void BuscarLetra()
    {
        await BuscarLetra(true);
    }

    public async Task BuscarLetra(bool mostrar = true)
    {
        var letraAux = await apiClient.GetLetraCancion(cancionArtista.title, cancionArtista.artist.name);

        letra = letraAux?.Lyrics ?? string.Empty;
        if (letraAux != null && !string.IsNullOrEmpty(letraAux.Lyrics) && mostrar)
        {
            await LoadStateAsync();
            await DialogService.OpenAsync<DialogCancionLetra>("",
                   new Dictionary<string, object>() { { "letraCancion", letra }, { "cancion", cancionArtista.title }, { "cantante", cancionArtista.artist.name } },
                   new DialogOptions()
                       {
                           Resizable = true,
                           Draggable = true,
                           Resize = OnResize,
                           Drag = OnDrag,
                           Width = Settings != null ? Settings.Width : "700px",
                           Height = Settings != null ? Settings.Height : "512px",
                           Left = Settings != null ? Settings.Left : null,
                           Top = Settings != null ? Settings.Top : null
                       });

            await SaveStateAsync();
        }
        else if (string.IsNullOrEmpty(letraAux.Lyrics))
        {
            SinLetra();
        }
    }

    private async void SinLetra()
    { await DialogService.Alert("No se ha encontrado la letra", "Letra no encontrada", new AlertOptions() { OkButtonText = "Yes" }); }


    void OnDrag(System.Drawing.Point point)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog drag. Left:{point.X}, Top:{point.Y}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Left = $"{point.X}px";
        Settings.Top = $"{point.Y}px";

        InvokeAsync(SaveStateAsync);
    }


    void OnResize(System.Drawing.Size size)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog resize. Width:{size.Width}, Height:{size.Height}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Width = $"{size.Width}px";
        Settings.Height = $"{size.Height}px";

        InvokeAsync(SaveStateAsync);
    }

    DialogSettings _settings;
    public DialogSettings Settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await JSRuntime.InvokeAsync<string>("window.localStorage.getItem", "DialogSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _settings = JsonSerializer.Deserialize<DialogSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await JSRuntime.InvokeVoidAsync("window.localStorage.setItem", "DialogSettings", JsonSerializer.Serialize<DialogSettings>(Settings));
    }
}
