@page "/editConcierto/{Id:guid}"
@page "/editConcierto/"

@using GestorConciertos.Shared
@using GestorConciertos.Services
@using GestorConciertos.Shared.DataApi
@inject IApiClient ApiClient;
@inject NotificationService NotificationService;
@inject IConciertoData conciertoData;
@inject IConciertoCancionData conciertoCancionData;
@inject ICancionFavoritaData cancionData;

<label> @error</label>

@if (concierto != null)
{
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="border: var(--rz-grid-cell-border);">
        <RadzenFormField Text="Nombre" Variant="Variant.Outlined">
            <RadzenTextBox @bind-Value="@concierto.Nombre" />
        </RadzenFormField>
        <RadzenFormField Text="Lugar" Variant="Variant.Outlined" Style="">
            <RadzenTextBox @bind-Value="@concierto.Lugar" />
        </RadzenFormField>
        <RadzenFormField Text="Fecha" Variant="Variant.Outlined">
            <RadzenDatePicker @bind-Value=@concierto.Fecha ShowTime="true"  HourFormat="12" DateFormat="dd/MM/yyyy hh:mm tt" Name="DatePickerHourFormat" />
        </RadzenFormField>

        <div class="rz-p-12 rz-text-align-center">
            <RadzenCheckBox @bind-Value=@concierto.esEnsayo />
            <RadzenLabel Text="Es Ensayo" Component="CheckBox1" class="rz-ms-2" />
        </div>

        <RadzenButton Icon="save" Text="Guardar Concierto" Click="Guardar" IconColor="@Colors.Info" />
    </RadzenStack>

    <RadzenCard>
        <RadzenPickList AllowMoveAll="false" AllowMoveAllSourceToTarget="false" AllowMoveAllTargetToSource="false" @bind-Source="@CancionesFavoritasDisponibles" @bind-Target="@CancionesSeleccionadas"
                        Style="height:500px; width:100%;" Orientation="Orientation.Horizontal"
                        TextProperty="@nameof(Cancion.FullName)" AllowFiltering="true" Multiple="true" ShowHeader="true"
                        ButtonGap="12px" ButtonJustifyContent="JustifyContent.Center" ButtonStyle="ButtonStyle.Dark" ButtonSize="ButtonSize.Medium" ButtonShade="Shade.Dark" ButtonVariant="Variant.Filled"
                        ItemRender="OnItemRender">
            <SourceHeader>
                Canciones Favoritas:
            </SourceHeader>
            <TargetHeader>
                Cancion para el Concierto:
            </TargetHeader>
            <Template>
                @context.FullName
            </Template>
        </RadzenPickList>
    </RadzenCard>



}



@code {
    [Parameter]
    public Guid Id { get; set; }
    private string error { get; set; }

    private Concierto concierto { get; set; }
    private List<ConciertoCancion> conciertoCanciones { get; set; }
   

    protected override Task OnInitializedAsync()
    {
        concierto = conciertoData.GetConcierto(Id);
        if (concierto == null)
        {
            concierto = new Concierto();
            CancionesFavoritasDisponibles = cancionData.GetCancionesFavoritas();
        }
        else
        {
            conciertoCanciones = conciertoCancionData.GetAllCancionesByIdConcierto(Id);
            List<Cancion> canciones = new List<Cancion>();
            foreach (ConciertoCancion cc in conciertoCanciones.OrderBy(x => x.orden))
            {
                //Canciones que ya estan seleccionadas
                canciones.Add(cancionData.GetCancionFavorita(cc.IdCancion));
            }
            CancionesSeleccionadas = canciones;
            CancionesFavoritasDisponibles = cancionData.GetCancionesFavoritasRestantes(canciones.Select(x=>x.Id).ToList());
            
        }


        return base.OnInitializedAsync();
    }


    private void Guardar()
    {
        if (string.IsNullOrEmpty(concierto.Nombre))
        {
            NotificationMessage notifyMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Error - sin datos",
                    Detail = "El nombre del concierto tiene que introducirse ",
                    Duration = 4000
                };
            NotificationService.Notify(notifyMessage);
        }
        if (string.IsNullOrEmpty(concierto.Lugar))
        {
            NotificationMessage notifyMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Error - sin datos",
                    Detail = "El lugar del concierto tiene que introducirse ",
                    Duration = 4000
                };
            NotificationService.Notify(notifyMessage);
        }

        if (CancionesSeleccionadas == null || !CancionesSeleccionadas.Any())
        {
            NotificationMessage notifyMessage = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Error - sin datos",
                    Detail = "El concierto no tiene canciones",
                    Duration = 4000
                };
            NotificationService.Notify(notifyMessage);
        }
        else
        {
            if (conciertoCanciones == null) conciertoCanciones = new List<ConciertoCancion>();
            for (int i = 0; i < CancionesSeleccionadas.Count(); i++)
            {
                if (conciertoCanciones.Count() > i)
                {
                    conciertoCanciones.ElementAt(i).IdCancion = CancionesSeleccionadas.ElementAt(i).Id;
                }
                else
                {
                    ConciertoCancion cc = new ConciertoCancion
                    {
                        IdConcierto = concierto.Id,
                        IdCancion = CancionesSeleccionadas.ElementAt(i).Id,
                        orden = i
                        };
                    conciertoCanciones.Add(cc);
                }
            }

            conciertoData.SaveConcierto(concierto);
            conciertoCancionData.SaveConciertoCanciones(conciertoCanciones);
        }
    }

    IEnumerable<Cancion> _cancionesFavoritasDisponibles;
    IEnumerable<Cancion> CancionesFavoritasDisponibles
    {
        get
        {
            return _cancionesFavoritasDisponibles;
        }
        set
        {
            if (_cancionesFavoritasDisponibles != value)
            {
                _cancionesFavoritasDisponibles = value;
            }
        }
    }

    IEnumerable<Cancion> _cancionesSeleccionadas;
    IEnumerable<Cancion> CancionesSeleccionadas
    {
        get
        {
            return _cancionesSeleccionadas;
        }
        set
        {
            if (_cancionesSeleccionadas != value)
            {
                _cancionesSeleccionadas = value;
            }
        }
    }


    void OnItemRender(PickListItemRenderEventArgs<Cancion> args)
    {
        //args.Disabled = args.Item.CompanyName.Contains("a");
    }

    //crear gestionde al mover los elementos y guardar en la base de datos
    //guardar el concierto o actualizarlo


}

