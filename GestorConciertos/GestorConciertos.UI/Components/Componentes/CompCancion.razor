 @using GestorConciertos.Shared;
@using GestorConciertos.Shared.DataApi

@inject ICancionFavoritaManager cancionFavoritaManager;

@using Microsoft.JSInterop
@using System.Text.Json
@inject DialogService DialogService
@inject IJSRuntime JSRuntime 

 <RadzenCard Variant="Variant.Filled" Style="max-width: 420px">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem">
        <RadzenImage Path="@cancion?.PictureCantante" Style="width: 100px; height: 100px; border-radius: 50%;" />
        <RadzenStack Gap="0">
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Cancion</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@cancion?.Nombre</b></RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Cantante</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@cancion?.Cantante</b></RadzenText>
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" Gap="0">
        <audio controls="" name="media"> <source src="@cancion.preview" type="audio/mpeg" preload="none"></audio>
        <RadzenButton Icon="lyrics" Click="verLetra"/>
        <RadzenButton Icon="delete" Click="RemoveFavorita" IconColor="@Colors.Danger"/>
    </RadzenStack>
</RadzenCard>
 

@code {
    [Parameter]
    public GestorConciertos.Shared.DataObject.Cancion cancion { get; set; }


    public async void RemoveFavorita()
    {
        cancionFavoritaManager.RemoveCancionFavorita(cancion.Id);
        //TODO : avisar de que se ha eliminado
    }


    public async void verLetra()
    {
        if (cancion.Letra != null && !string.IsNullOrEmpty(cancion.Letra) )
        {
            await LoadStateAsync();
            await DialogService.OpenAsync<DialogCancionLetra>("",
                   new Dictionary<string, object>() { { "letraCancion", cancion.Letra }, { "cancion", cancion.Nombre }, { "cantante", cancion.Cantante } },
                   new DialogOptions()
                       {
                           Resizable = true,
                           Draggable = true,
                           Resize = OnResize,
                           Drag = OnDrag,
                           Width = Settings != null ? Settings.Width : "700px",
                           Height = Settings != null ? Settings.Height : "512px",
                           Left = Settings != null ? Settings.Left : null,
                           Top = Settings != null ? Settings.Top : null
                       });

            await SaveStateAsync();
        }
        else if (string.IsNullOrEmpty(cancion.Letra))
        {
            SinLetra();
        }
    }

    private async void SinLetra()
    { await DialogService.Alert("No se ha encontrado la letra", "Letra no encontrada", new AlertOptions() { OkButtonText = "Yes" }); }


    void OnDrag(System.Drawing.Point point)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog drag. Left:{point.X}, Top:{point.Y}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Left = $"{point.X}px";
        Settings.Top = $"{point.Y}px";

        InvokeAsync(SaveStateAsync);
    }


    void OnResize(System.Drawing.Size size)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog resize. Width:{size.Width}, Height:{size.Height}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Width = $"{size.Width}px";
        Settings.Height = $"{size.Height}px";

        InvokeAsync(SaveStateAsync);
    }

    DialogSettings _settings;
    public DialogSettings Settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await JSRuntime.InvokeAsync<string>("window.localStorage.getItem", "DialogSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _settings = JsonSerializer.Deserialize<DialogSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await JSRuntime.InvokeVoidAsync("window.localStorage.setItem", "DialogSettings", JsonSerializer.Serialize<DialogSettings>(Settings));
    }
    public class DialogSettings
    {
        public string Left { get; set; }
        public string Top { get; set; }
        public string Width { get; set; }
        public string Height { get; set; }
    }
}
